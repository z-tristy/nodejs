// Re-assigned maps
//
// Placed here so that others can override the default Sass maps and see automatic updates to utilities and more.

// scss-docs-start theme-colors-rgb
$theme-colors-rgb: map-loop($theme-colors, to-rgb, "$value") !default;
// scss-docs-end theme-colors-rgb

// Utilities maps
//
// Extends the default `$theme-colors` maps to help create our utilities.

// Come v6, we'll de-dupe these variables. Until then, for backward compatibility, we keep them to reassign.
// scss-docs-start utilities-colors
$utilities-colors: $theme-colors-rgb !default;
// scss-docs-end utilities-colors

// scss-docs-start utilities-text-colors
$utilities-text: map-merge(
  $utilities-colors,
  (
    "black": to-rgb($black),
    "white": to-rgb($white),
    "body": to-rgb($body-color),
    "body-inverse": to-rgb($white)
  )
) !default;
$utilities-text-colors: map-loop($utilities-text, rgba-css-var, "$key", "text") !default;
// scss-docs-end utilities-text-colors

// scss-docs-start utilities-bg-colors
$utilities-bg: map-merge(
  $utilities-colors,
  (
    "black": to-rgb($black),
    "white": to-rgb($white),
    "body": to-rgb($body-bg)
  )
) !default;
$utilities-bg-colors: map-loop($utilities-bg, rgba-css-var, "$key", "bg") !default;
// scss-docs-end utilities-bg-colors

// scss-docs-start utilities-border-colors
$utilities-border: map-merge(
  $utilities-colors,
  (
    "white": to-rgb($white)
  )
) !default;
$utilities-border-colors: map-loop($utilities-border, rgba-css-var, "$key", "border") !default;
// scss-docs-end utilities-border-colors

$negative-spacers: if($enable-negative-margins, negativify-map($spacers), null) !default;
$negative-spacers-base-value: if($enable-negative-margins, negativify-map($spacers-base-phone-value), null) !default;

$gutters: $spacers !default;

$spacers-base-value: generate-map-with-base-value($spacers, $spacers-base-phone-value);

$negative-spacers-base-value: generate-map-with-base-value($negative-spacers, $negative-spacers-base-value);

$section-spacers-base-value: generate-map-with-base-value($section-spacers, $section-spacers-mob);

$utilities-all-spacers: map-merge-multiple(
  $spacers-base-value,
  $negative-spacers-base-value,
  $section-spacers-base-value
) !default;

$utilities-spacers-css-vars: if($enable-customize-spacer, map-loop($spacers, custom-properties-css-var, "$key", "spacer"), $spacers) !default;

$utilities-section-spacers-css-vars: if($enable-customize-spacer, map-loop($section-spacers, custom-properties-css-var, "$key", "spacer"), $section-spacers) !default;

$utilities-negative-spacers-css-vars: if($enable-customize-spacer, map-loop($negative-spacers, custom-properties-css-var, "$key", "spacer"), $negative-spacers) !default;
// scss-docs-end

// Typography
// scss-docs-start
$utilities-font-size-css-vars: if($enable-rfs, $font-sizes, map-loop($font-sizes, custom-properties-css-var, "$key", "fs")) !default;
$utilities-font-size: () !default;
@if $enable-rfs {
  $utilities-font-size: map-merge($utilities-font-size, $font-sizes);
}
@else {
  $utilities-font-size: map-merge($utilities-font-size,
    generate-map-with-base-value($font-sizes, $font-sizes-base-value)
  );
}

$utilities-display-font-size: () !default;
@if $enable-rfs {
  $utilities-display-font-size: map-merge($utilities-display-font-size, $display-font-sizes);
}
@else {
  $utilities-display-font-size: map-merge($utilities-display-font-size,
    generate-map-with-base-value($display-font-sizes, $display-font-sizes-base-value)
  );
}
// scss-docs-end
